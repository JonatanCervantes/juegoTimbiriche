/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.GeneralPath;
import java.util.ArrayList;
import static javax.swing.JFrame.EXIT_ON_CLOSE;
import javax.swing.JPanel;
import objnegocio.Punto;
import objnegocio.Tablero;

/**
 *
 * @author Usuario
 */
public class PartidaUI extends javax.swing.JFrame {

    private int tamanioTablero = 900;
    private int numeroLineas = 0;

    //Panel que contiene el tablero
    Tablero ventanaTablero;

    //Variables para dibujar las lineas
    private MouseHandler mouseHandler = new MouseHandler();
    ArrayList<GeneralPath> lineas = new ArrayList<GeneralPath>();
    GeneralPath path = null;
    private boolean drawing = false;
    private Punto[] lineaActual;

    //Constructor
    public PartidaUI(int numJug) {
        //initComponents();

        inicializar(numJug);
        lineaActual = new Punto[2];

    }

    private void inicializar(int numJug) {

        this.setPreferredSize(new Dimension(tamanioTablero, tamanioTablero));
        ventanaTablero = new Tablero(numJug, tamanioTablero);
        ventanaTablero.setPreferredSize(new Dimension(tamanioTablero, tamanioTablero));

        this.add(ventanaTablero, BorderLayout.CENTER);
        this.pack();

        ventanaTablero.addMouseListener(mouseHandler);
        ventanaTablero.addMouseMotionListener(mouseHandler);

        this.setVisible(true);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);

        ventanaTablero.generarPuntos();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 966, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 474, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void paint(Graphics g) {

        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setStroke(new BasicStroke(2));

        int contadorParaColor = 0;

        if (path != null) {
            for (int i = 0; i < lineas.size(); i++) {

                //HACER UN METODO QUE SEA PARA DECIDIR EL COLOR
                switch (contadorParaColor) {
                    case 0:
                        g2d.setColor(Color.BLUE);
                        contadorParaColor++;
                        break;
                    case 1:
                        g2d.setColor(Color.RED);
                        contadorParaColor++;
                        break;
                    case 2:
                        g2d.setColor(Color.GREEN);
                        contadorParaColor = 0;
                        break;
                    default:
                        break;
                }

                if (lineas.get(i) != null) {
                    g2d.draw(lineas.get(i));

                }
            }
        }
        

        ventanaTablero.dibujarTablero();
        
        
    }

    @Override
    public void repaint() {
        Graphics g = ventanaTablero.getGraphics();
        paint(g);
    }

    public void actualizarLineas() {
        String desplazamiento = "";

        //Se determina hacia donde se desplazo la linea, con respecto al primer punto seleccionado
        if (lineaActual[0].obtenerX() > lineaActual[1].obtenerX()) {
            if (lineaActual[0].obtenerY() == lineaActual[1].obtenerY()) {
                desplazamiento = "izquierda";
                System.out.println(desplazamiento);
                ventanaTablero.obtenerPuntoReal(lineaActual[0]).setLineaIzquierda(true);
                ventanaTablero.obtenerPuntoReal(lineaActual[1]).setLineaDerecha(true);
            }
        }

        if (lineaActual[0].obtenerX() < lineaActual[1].obtenerX()) {
            if (lineaActual[0].obtenerY() == lineaActual[1].obtenerY()) {
                desplazamiento = "derecha";
                System.out.println(desplazamiento);
                ventanaTablero.obtenerPuntoReal(lineaActual[0]).setLineaDerecha(true);
                ventanaTablero.obtenerPuntoReal(lineaActual[1]).setLineaIzquierda(true);

            }
        }

        if (lineaActual[0].obtenerY() < lineaActual[1].obtenerY()) {
            if (lineaActual[0].obtenerX() == lineaActual[1].obtenerX()) {
                desplazamiento = "abajo";
                System.out.println(desplazamiento);
                ventanaTablero.obtenerPuntoReal(lineaActual[0]).setLineaAbajo(true);
                ventanaTablero.obtenerPuntoReal(lineaActual[1]).setLineaArriba(true);

            }
        }

        if (lineaActual[0].obtenerY() > lineaActual[1].obtenerY()) {
            if (lineaActual[0].obtenerX() == lineaActual[1].obtenerX()) {
                desplazamiento = "arriba";
                System.out.println(desplazamiento);
                ventanaTablero.obtenerPuntoReal(lineaActual[0]).setLineaArriba(true);
                ventanaTablero.obtenerPuntoReal(lineaActual[1]).setLineaAbajo(true);
                
            }
        }

    }
    
    public boolean movimientoInvalido1() {
        //1. Hacer 2 clicks EN EL MISMO PUNTO
        if (lineaActual[0].obtenerX() == lineaActual[1].obtenerX()) {
            if (lineaActual[0].obtenerY() == lineaActual[1].obtenerY()) {
                return true;
            }
        }
        return false;
    }
    
    public boolean movimientoInvalido2() {
        //2. Hacer una linea QUE UNA PUNTOS NO ADYACENTES
        int espacioEntrePuntos = ventanaTablero.getEspacioEntrePuntos();
        
        //Se determina hacia donde se desplazo la linea, con respecto al primer punto seleccionado
        if (Math.abs(lineaActual[0].obtenerX() - lineaActual[1].obtenerX()) > (espacioEntrePuntos + 5)) {
            if (lineaActual[0].obtenerY() == lineaActual[1].obtenerY()) {
                return true;
            }
        }


        if (Math.abs(lineaActual[0].obtenerY() - lineaActual[1].obtenerY()) > (espacioEntrePuntos + 5)) {
            if (lineaActual[0].obtenerX() == lineaActual[1].obtenerX()) {
                return true;
            }
        }
        
        return false;

        
    }
    
    public boolean movimientoInvalido3() {
        //3. Hacer una linea QUE UNA PUNTOS EN DIAGONAL
        if (lineaActual[0].obtenerX() != lineaActual[1].obtenerX()) {
            if (lineaActual[0].obtenerY() != lineaActual[1].obtenerY()) {
                return true;
            }
        }
        return false;        
    }
    
    public boolean movimientoInvalido4() {
        //4. Hacer una linea sobre una linea ya dibujada
        String desplazamiento = "";
        //Se obtienen los puntos del tablero reales
        Punto punto0 = ventanaTablero.obtenerPuntoReal(lineaActual[0]);
        Punto punto1 = ventanaTablero.obtenerPuntoReal(lineaActual[1]);

        
        //Se determina hacia donde se desplazo la linea, con respecto al primer punto seleccionado
        if (lineaActual[0].obtenerX() > lineaActual[1].obtenerX()) {
            if (lineaActual[0].obtenerY() == lineaActual[1].obtenerY()) {
                desplazamiento = "izquierda";                 
                //Se verifica si ya hay una linea en ese punto hacia esa direccion
                if(punto0.isLineaIzquierda() == true) {
                    return true;
                }
                
            }
        }

        if (lineaActual[0].obtenerX() < lineaActual[1].obtenerX()) {
            if (lineaActual[0].obtenerY() == lineaActual[1].obtenerY()) {
                desplazamiento = "derecha";
                //Se verifica si ya hay una linea en ese punto hacia esa direccion
                if(punto0.isLineaDerecha() == true) {

                    return true;

                }
                
            }
        }

        if (lineaActual[0].obtenerY() < lineaActual[1].obtenerY()) {
            if (lineaActual[0].obtenerX() == lineaActual[1].obtenerX()) {
                desplazamiento = "abajo";
                //Se verifica si ya hay una linea en ese punto hacia esa direccion
                if(punto0.isLineaAbajo() == true) {
                    return true;
                }
                
            }
        }

        if (lineaActual[0].obtenerY() > lineaActual[1].obtenerY()) {
            if (lineaActual[0].obtenerX() == lineaActual[1].obtenerX()) {
                desplazamiento = "arriba";
                //Se verifica si ya hay una linea en ese punto hacia esa direccion
                if(punto0.isLineaArriba() == true) {
                     return true;
                }
                
            }
        }
        
        return false;
        
    }
    
    public boolean movimientoEsValido() {
        //Existen tres tipos de movimientos invalidos:
        //1. Hacer 2 clicks EN EL MISMO PUNTO
        //2. Hacer una linea QUE UNA PUNTOS NO ADYACENTES
        //3. Hacer una linea QUE UNA PUNTOS EN DIAGONAL
        //4. Hacer una linea sobre una linea ya dibujada
        
        //Verificacion para la numero 1.
        boolean movimientoErroneo = movimientoInvalido1();
        if(movimientoErroneo == true) {
            System.out.println("No puedes hacer una linea en el mismo punto");
            return false;
        }
        
        movimientoErroneo = movimientoInvalido2();        
        if(movimientoErroneo == true) {
            System.out.println("No puedes hacer lineas tan largas");
            return false;
        }
        
        movimientoErroneo = movimientoInvalido3();        
        if(movimientoErroneo == true) {
            System.out.println("No puedes hacer lineas diagonales");
            return false;
        }
        
        movimientoErroneo = movimientoInvalido4();
        if(movimientoErroneo == true) {
            System.out.println("No puedes hacer lineas sobre otras lineas");
            return false;
        }
        
        return true;        
    }
    
    
   

    private class MouseHandler extends MouseAdapter {

        @Override
        public void mousePressed(MouseEvent e) {

            Punto p = ventanaTablero.detectarPunto(e.getPoint());

            if (!drawing) {
                path = new GeneralPath();
                path.moveTo(p.obtenerX(), p.obtenerY());
                drawing = true;
                lineaActual[0] = p;
            } else {                
                lineaActual[1] = p;
                if(movimientoEsValido()) {
                    path.lineTo(p.obtenerX(), p.obtenerY());
                    lineas.add(path);
                    actualizarLineas();
                    numeroLineas++;     
                    drawing = false;
                }
                
            }

            repaint();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser jFileChooser1;
    // End of variables declaration//GEN-END:variables
}
